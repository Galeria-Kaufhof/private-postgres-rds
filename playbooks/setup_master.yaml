---
- name: Deactivate obsolete master and slaves
  hosts: postgres-DEACTIVATE
  gather_facts: False
  remote_user: root
  become_user: root
  become: true
  tasks:
    - name: Stop postgres
      service: name=postgresql enabled=no state=stopped
    - name: Mark config as deactivated, part1
      command: mv /var/local/postgresql/data/postgresql.conf /var/local/postgresql/data/postgresql.conf.deactivated
      args:
        creates: /var/local/postgresql/data/postgresql.conf.deactivated
        removes: /var/local/postgresql/data/postgresql.conf
    - name: Mark config as deactivated, part2
      command: touch /var/local/postgresql/data/postgresql.conf.deactivated
      args:
        creates: /var/local/postgresql/data/postgresql.conf.deactivated

- name: Check current groups
  hosts: all
  tasks:
    - name: "Debug groups"
      debug: var=groups['postgres-MASTER']
      delegate_to: localhost

- name: Set up (possibly new) postgres master
  hosts: postgres-MASTER
  gather_facts: True
  remote_user: root
  become_user: root
  become: true
  tasks:
    - name: Check if recovery (replication) is ongoing
      stat: path=/var/local/postgresql/data/recovery.conf
      register: recovery_file
    - name: Case 1 - promote existing slave to master
      shell: "pg_ctl -D /var/local/postgresql/data promote"
      become: true
      when: recovery_file.stat.exists
      become_user: postgres
      notify:
        - Initial full backup

    # Case 2 - restore from backup - extract data

    - name: Create restore script
      template:
        src: "../templates/restore_backup.sh.j2"
        dest: "/var/local/postgresql/restore_backup.sh"
        mode: 0555
    - name: Copy restore bucket credentials
      copy: dest=/var/local/postgresql/aws_restore.credentials.sh
        src="{{ credentials_store }}/backup/{{ from_stage }}/configurer.credentials.sh"
      when: from_db_instance is defined

    - name: Case 2 - restore from backup - extract data
      shell: "/var/local/postgresql/restore_backup.sh {{ recover_from }} '{{recovery_target_time | default() }}'"
      become: true
      become_user: postgres
      when: recover_from is defined
      notify:
        - Restart postgres
        - Initial full backup

    - name: Add rsylog config for postgres logfiles
      copy:
        dest: "/etc/rsyslog.d/postgresql.conf"
        src: "files/rsyslog_postgres.conf"
      notify:
        - Restart postgres
        - Restart rsyslog

    - name: Check existing configuration file
      stat: path=/var/local/postgresql/data/postgresql.conf
      register: configuration_file
  #~    - pause:
  #~        prompt: Before Case 3 - init DB
    - name: Case 3 - init DB - new database storage
      shell: "ls -al /var/local/postgresql; find /var/local/postgresql; pg_ctl -D /var/local/postgresql/data initdb"
      become: true
      become_user: postgres
      when: not configuration_file.stat.exists
      notify:
        - Restart postgres
        - Initial full backup

    - debug: var=ansible_local.pg

    # For all cases: new master, just promoted to master or an old existing master
    - name: Ensure same max_connections setting for all - master and slaves
      set_fact:
        master_memtotal_mb: "{{ ansible_memtotal_mb }}"
    - name: Copy postgres configuration file
      template:
        src: "../templates/postgresql.conf.j2"
        dest: "/var/local/postgresql/data/postgresql.conf"
      notify: Restart postgres
    - name: Copy postgres hba file
      template:
        src: "../templates/pg_hba.conf.j2"
        dest: "/var/local/postgresql/data/pg_hba.conf"
      notify: Restart postgres

    handlers:
    - name: Restart rsyslog
      service: name=rsyslog enabled=yes state=restarted
    - name: Restart postgres
      service: name=postgresql enabled=yes state=restarted
      notify: Wait until (possible) recovery is finished
    - name: Wait until (possible) recovery is finished
      wait_for:
        path: /var/local/postgresql/data/recovery.conf
        state: absent
        timeout: 2592000 # 30 days = almost forever
    - name: Initial full backup
      command: "/var/local/postgresql/full_backup_to_aws.sh"
      poll: 0
      async: 2592000 # 30 days = almost forever
      become: true
      become_user: postgres
      # when: False # deactivate initial full backup for faster setup

- name: Create, set up postgres users
  hosts: postgres-MASTER
  gather_facts: False
  remote_user: root
  become_user: postgres
  become: true
  tasks:
    - name: Set domain team admin user
      postgresql_user:
        login_unix_socket: /tmp
        name: admin
        password: "{{ admin_password }}"
        role_attr_flags: SUPERUSER
        no_password_changes: yes

    - name: Set replication user
      postgresql_user:
        login_unix_socket: /tmp
        name: replicator
        password: "{{ replicator_password }}"
        role_attr_flags: REPLICATION
