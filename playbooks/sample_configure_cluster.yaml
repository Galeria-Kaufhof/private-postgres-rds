# Decide: reuse through import-playbook or (fine granular) by referring to single task-lists
---
- name: Set up cluster config - decide, which is master and which is slave
  hosts: postgres
  tasks:
    - debug: var=hostvars
    - name: Set cluster config
      set_fact:
        cluster_config: "{{ lookup('compute_postgres_groups', hostvars) }}"
        # use ansible_local.pg

    - debug: var=cluster_config['postgres-MASTER']

    - name: Build group {{ item }}
      group_by: key={{ item }}
      when: (item in cluster_config) and (inventory_hostname in cluster_config[item])
      with_items:
        - postgres-MASTER
        - postgres-SLAVES
        - postgres-DEACTIVATED
        - postgres-DEACTIVATE

    - debug: var=cluster_config['slave_upstream'] # set for every slave
    - debug: var=groups

    - fail:

- name: First, setup the master
  include: setup_master.yaml

- name: Register master
  hosts: postgres-MASTER
  tasks:
    - name: Save master endpoint to a file
      copy:
        content: "{{ inventory_hostname }}"
        dest: ../test/state/postgres-service-endpoint
      delegate_to: localhost

- name: Setup slave(s)
  include: setup_slave.yaml

  #- name: Detect configured master node(s) and build appropriate host-groups
  #  hosts: postgres
  #  remote_user: root
  #  become: True
  #  tasks:
  #    # generate-or-load-postgres-credentials
  #    #~    - include_role:
  #    #~        name: private-postgres-rds
  #    #~        tasks_from: init_settings.yaml
  #    - include_role:
  #        name: private-postgres-rds
  #        tasks_from: build_groups.yaml
  #    - debug: var=hostvars
  #    - include_role:
  #        name: private-postgres-rds
  #        tasks_from: deactivate_servers.yaml
  #    # prepare admin-, replicator- passwords
  #    - include_role:
  #        name: private-postgres-rds
  #        tasks_from: setup_master.yaml
  #    - include_role:
  #        name: private-postgres-rds
  #        tasks_from: register_master_in_dns # highly specific
  #    - include_role:
  #        name: private-postgres-rds
  #        tasks_from: create_postgres_users
  #    - include_role:
  #        name: private-postgres-rds
  #        tasks_from: setup_slaves
  #    - include_role:
  #        name: private-postgres-rds
  #        tasks_from: register_slaves_as_readonly # new, for BSNA
  #
  #- name: Set up off site backup to AWS
  #  hosts: aws_commands_host
  #  tasks:
  #    - include_role:
  #        name: private-postgres-rds
  #        tasks_from: setup_offsite_backup # specific
  #

  #~    - debug:
  #~        msg: |
  #~          You can now use the postgres instance with
  #~
  #~          psql -h {{ postgres_service_domain }} -U admin -d postgres
  #~
  #~          The password, initially set by this ansible playbook is
  #~          {{ admin_password }}
  #~          Please change on first usage!
  #~          Please create additional users with less privileges to use with you application!

