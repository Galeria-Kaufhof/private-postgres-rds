# -*- mode: ruby -*-
# vi: set ft=ruby :

VAGRANTFILE_API_VERSION = "2"

def define_pg_vm(config, n)
  # VM configuration for postgres nodes
  name = "pg0#{n}"
  config.vm.define name do |kconfig|
    kconfig.vm.hostname = "#{name}.vagrant"
    kconfig.vm.provider "virtualbox" do |vb|
      vb.customize ["modifyvm", :id, "--name", kconfig.vm.hostname,
                    "--memory", "1024", "--cpus", "2", "--ioapic", "on"]
    end
    kconfig.vm.network "private_network", ip: "192.168.121.10#{n}"
    yield kconfig if block_given?
  end
end

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # config.vm.box = "ubuntu/xenial64"
  config.vm.box = "generic/ubuntu1604"
  if Vagrant.has_plugin?("vagrant-cachier")
    config.cache.scope = :machine
    config.cache.enable :gem
  else
    puts "Please run: vagrant plugin install vagrant-cachier"
  end

  # config.hostsupdater.remove_on_suspend = false

  #config.vm.synced_folder "..", "/vagrant"
  vagrant_root = File.dirname(__FILE__)
  ENV['ANSIBLE_ROLES_PATH'] = "#{vagrant_root}/../.."

  define_pg_vm config, 2
  define_pg_vm config, 3
  define_pg_vm config, 4
  define_pg_vm config, 1 do |kconfig|
    kconfig.vm.network "forwarded_port", guest: 5432, host: 15432
    kconfig.vm.provision "ansible" do |ansible|
      ansible.playbook = "init-test-servers.yml"
      ansible.inventory_path = "vagrant_servers"
      ansible.verbose = "vv"
      ansible.limit = "postgres"
      ansible.skip_tags = []
      ansible.extra_vars = {remote_user: "vagrant"}
    end
  end
end
